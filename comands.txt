//Gerar model + migration
$ npx sequelize-cli model:generate --name User --attributes name:string,email:string,verified_email:boolean,is_admin:boolean,phone:string,password:string

$ npx sequelize-cli model:generate --name Channel --attributes description:string,comission_fee:decimal

$ npx sequelize-cli model:generate --name PaymentMethod --attributes  description:string,operator_fee:decimal 
2° passo: ajustar a migration colocando em snake_case no up de no down e ajustar o tamanho das strings (30) por exemplo
3° passo: executar npx sequelize-cli db:migrate 
4° Copiar as definições de campos da migration (exceto created_at e updated_at) e colar (substituir) a definicao dos campos no model

const paymentMethods = require('./routes/payment_methods')
app.use('/payment_methods', paymentMethods)

//Comando para gerar apenas uma migration (sem model)
npx sequelize-cli migration:generate --name alter-table-users

//Ligando uma chave estrangeira a outra tabela
npx sequelize-cli migration:generate --name alter-table-customers
- No "async up" da migration nova que foi criada copie e cole o codigo abaixo:
//Cria a chave estrangeira da tabela customers para a tabela cities
await queryInterface.addConstraint('customers', {
    fields: ['city_id'], //Campo(s) da tabela de origem
    type: 'foreing key',
    //nome da chave estrangeira(deve ser unico do BD)
    name: 'customers_cities_fk', 
    references: {
        table: 'cities',    //Tabela estrangeira
        field: 'id'         //Campo da tabela estrangeira
    },
    onDelete: 'Restrict' //Não deixa apagar uma city em uso no customer
    onUpdate: 'CASCADE' //Atualiza city_id em customer se id em city mudar
})

- No "async down" da migration vamos digitar:
//Reverte as alterações do up()
await queryInterface.removeConstraint('customers, customers_cities_fk')

ao finalizar damos um db:migrate

Indo no model do custommer na area static associate(models) digitaremos:
    this.belongsTo(models.City, { //Nome do campo na tabela de ORIGEM
        foreignKey: 'city_id',    //Nome do campo na tabela de DESTINO
        targetKey: 'id',          //Nome do atributo para exibição
        as: 'city'
    })
Indo no controller do customer
const {Customer, City}
Agora indo no retrieve e no .findAll({
    include: {model: City, as: 'city'}
})

////////////////////////// AULA 21/03
Indo no model do city na area static associate(models) digitaremos:
    this.hasMany(models.Customer, { //Nome do campo na tabela de ORIGEM
        foreignKey: 'city_id',    //Campo da tabela estrangeira
        sourceKey: 'id',          //Campo da tabela local
        as: 'customers'           //Nome do campo de associação (plural)
    })
//Indo no controller do city dentro do City.findAll digite:
City.findAll({
    
    include: {model: Customer, as: 'customers'}
})
e importe o Customer na const da linha 2

//Agora vamos fazer o customer_tag que tem 2 chaves
1° passo daremos o comando:
npx sequelize-cli migration:generate --name alter-table-customers-tags
Depois damos um ctrl C no async up da migration do customer e colamos na nova que fizemos agora

await queryInterface.addConstraint('customer_tags', {
    fields: ['customer_id'], //Campo(s) da tabela de origem
    type: 'foreing key',
    //nome da chave estrangeira(deve ser unico do BD)
    name: 'customers_tags_customers_fk', 
    references: {
        table: 'customers',    //Tabela estrangeira
        field: 'id'         //Campo da tabela estrangeira
    },
    onDelete: 'RESTRICT' //Não deixa apagar uma city em uso no customer
    onUpdate: 'CASCADE' //Atualiza customer_id em customer_tags se id em customers mudar
})

Agora copiamos e vamos fazer a segunda chave

await queryInterface.addConstraint('customer_tags', {
    fields: ['tag_id'], //Campo(s) da tabela de origem
    type: 'foreing key',
    //nome da chave estrangeira(deve ser unico do BD)
    name: 'customers_tags_tags_fk', 
    references: {
        table: 'tags',    //Tabela estrangeira
        field: 'id'         //Campo da tabela estrangeira
    },
    onDelete: 'RESTRICT' //Não deixa apagar uma city em uso no customer
    onUpdate: 'CASCADE' //Atualiza customer_id em customer_tags se id em customers mudar
})

no async down digitraemos: (queryInterface, Sequelize) {
    await queryInterface.removeConstraint('customer_tags, customers_tags_tags_fk')
    await queryInterface.removeConstraint('customer_tags, customers_tags_customers_fk')
}

ao finalizar damos um db:migrate

agora vá na model do customer e adicione

this.hasMany(models.CustomerTag, {
    foreignKey: customer_id,
    sourceKey: 'id',
    as: 'tags' 
})

agora no controller do customer adicione no findAll
{model: CustomerTag, as: 'tags'}
e importe o CustomerTag la encima

Agora indo no customer tag (model) adicione o belongsTo no associate:
this.belongsTo(models.Customer, { //Nome do campo na tabela de ORIGEM
        foreignKey: 'customer_id',    //Nome do campo na tabela de DESTINO
        targetKey: 'id',          //Nome do atributo para exibição
        as: 'customer'
    })

    Agora no controller do customer_tag  importe o Customer
    e coloque o no findAll o include 
    include: {model: Customer, as: 'customer'}

///////////// Aula 23/03

Agora indo no model da tag adicionaremos um hasMany
this.hasMany(models.CustomerTag, {
    foreignKey: tag_id,
    sourceKey: 'id',
    as: 'customers' 
})

Agora no controller da tag e importamos o CustomerTag no require
Em seguida no findAll fazemos um include
const data = await Tag.findAll({
    include: { model: CustomerTag, as: 'customers'}}
)

agora indo no model do customer_tag para fazer o belongsTo
this.belongsTo(models.Tag, {
    foreignKey: tag_id,
    sourceKey: id
    as: tag
})

No controller, quando temos um include e queremos colocar mais um temos que fazer ele virar um vetor
const data = await CustomerTag.findAll({
    include: [
        { model: Customer, as: 'customer' },
        { model: Tag, as: 'tag' }
    ]
})

No model no customer em associate comente o hasMany dele e faremos
this.belongsToMany(models.Tag, {
    through: 'customer_tags', //Tabela intermediária
    foreignKey: 'customer_id, //Chave estrangeira
    otherKey: 'tag_id', //Outra chave da tabela intermediária
    as: 'tags          //Nome do campo de associação (Plural)
})

No controller do customer no findAll deixaremos no include e importaremos a Tag no require
const data = await Customer.findAll ({
    include: [
        {model: City, as: 'city'},
        {model: Tag, as: 'tags}
    ]
})

No model da tag comentaremos o hasMany
this.belongsToMany(models.Customer, {
    through: 'customer_tags', //Tabela intermediária
    foreignKey: 'tag_id', //Chave estrangeira
    otherKey: 'customer_id', //Outra chave da tabela intermediária
    as: 'customers'          //Nome do campo de associação (Plural)
})

No controller da tag no findAll importamos o Customer no retrieve
include: {model: Customer, as: 'customers'}
